# docker-compose.yml
services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./static:/usr/share/nginx/html 
    networks:
      - my-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - my-network

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=mySecretPassw0rd123!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
    networks:
      - my-network

  postgres_profile:
    image: postgres:16
    environment:
      - POSTGRES_DB=profile_db
      - POSTGRES_USER=profile_user
      - POSTGRES_PASSWORD=ProfileDBPassword!
    volumes:
      - postgres_data_profile:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U profile_user -d profile_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5433:5432" 
    networks:
      - my-network

  api-gateway:
    build:
      context: ./APIGateway  # Путь к папке APIGateway
      dockerfile: APIGateway/Dockerfile  # Относительно контекста
    ports:
      - "80"
    networks:
      - my-network

  auth-service:
    build:
      context: ./AuthService  # Путь к папке AuthService
      dockerfile: AuthService/Dockerfile
    ports:
      - "80"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=auth_db;Username=auth_user;Password=mySecretPassw0rd123!
    # deploy:
    #   replicas: 3
    #   placement:
    #     constraints:
    #       - node.role == worker
    networks:
      - my-network

  profile-service:
    build:
      context: ./ProfileService
      dockerfile: ProfileService/Dockerfile
    ports:
      - "80"
    depends_on:
      postgres_profile:
        condition: service_healthy
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_profile;Port=5432;Database=profile_db;Username=profile_user;Password=ProfileDBPassword!
    networks:
      - my-network

  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - SUBDOMAINS=kiberone 
      - TOKEN=00f0d6c6-d622-4618-a17e-5fbeaffabc3e  
      - LOG_FILE=true        
    restart: unless-stopped
    networks:
      - my-network
  
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - my-network

  redis_profile:
    image: redis:7.0-alpine
    volumes:
      - redis_data_profile:/data
    networks:
      - my-network

networks:
  my-network: 
    driver: bridge

volumes:
  postgres_data:
  postgres_data_profile:
  redis_data:
  redis_data_profile:
